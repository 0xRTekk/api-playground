openapi: 3.0.3
info:
  title: Todolist API
  description: The APi for our todolist
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Tasks
    description: Everything about Tasks
  - name: Users
    description: Everything about Users
paths:
  /tasks:
    get:
      tags:
        - Tasks
      summary: All tasks
      description: Return all the tasks for all the users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      tags:
        - Tasks
      summary: Create a new task
      requestBody:
        description: Should contain the new task informations
        content:
          application/json:
            schema:
              type : object
              example: {"label" : 'My task'}
      description: Create a new task and return it
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Bad Request
        "500":
          description: Internal Error
  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: One task
      description: FInd a task by id
      parameters:
        - name: id
          in: path
          description: ID of tasks to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    put:
      tags:
        - "Tasks"
      summary: Complete update of a task
      description: Complete update of a task
      parameters:
        - name: id
          in: path
          description: ID of task to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    patch:
      tags:
        - "Tasks"
      summary: Partial task update
      description: Partial task update
      parameters:
        - name: id
          in: path
          description: ID of task to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Partial task update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    delete:
      tags:
        - "Tasks"
      summary: Delete a task
      description: Delete a task
      parameters:
        - name: id
          in: path
          description: ID of task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task deletion successful
        '404':
          description: Task not found

  /users:
    get:
      tags:
        - "Users"
      summary: All Users
      description: Returns all users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - "Users"
      summary: Adding a new user
      description: Adding a new user
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    

  /users/{id}:
    get:
      tags:
        - "Users"
      summary: Find User by ID
      description: Returns a specific user
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      tags:
        - "Users"
      summary: Complete update of a user
      description: Complete update of a user
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"


    patch:
      tags:
        - "Users"
      summary: Partial user update
      description: Partial user update
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Partial user update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    delete:
      tags:
        - "Users"
      summary: Delete a user
      description: Delete a user
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deletion successful
        '404':
          description: User not found


components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        label:
          type: string
          example: Coder une API REST avec nodeJs et Express
        done:
          type: boolean
          example: true
        userId:
          type: integer
          format: int64
          example: 1

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        login:
          type: string
          example: "john.doe"
        password:
          type: string
          format: password
          writeOnly: true
          example: "mypassword"